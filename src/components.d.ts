/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { OptionType } from "./components/custom-select/custom-select";
export { OptionType } from "./components/custom-select/custom-select";
export namespace Components {
    interface AppCard {
        "airDate": string;
        "imageURL": string;
        "itemId": number;
        "mediaType": 'person' | 'tv' | 'movie';
        "name": string;
        "rating": string | number;
    }
    interface AppHeader {
    }
    interface AppHome {
    }
    interface AppRoot {
    }
    interface CustomSelect {
        "allowClear": boolean;
        "clearSelectionText": string;
        "options": OptionType[];
        "placeholder": string;
        "selectedOption": OptionType;
        "setSelectedOption": (option: OptionType) => Promise<void>;
    }
    interface SearchResultCard {
        "airDate": string;
        "imageURL": string;
        "itemId": number;
        "mediaType": 'person' | 'tv' | 'movie';
        "name": string;
        "rating": string | number;
    }
    interface SearchResults {
        "query": string;
        "type": any;
    }
}
export interface CustomSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCustomSelectElement;
}
declare global {
    interface HTMLAppCardElement extends Components.AppCard, HTMLStencilElement {
    }
    var HTMLAppCardElement: {
        prototype: HTMLAppCardElement;
        new (): HTMLAppCardElement;
    };
    interface HTMLAppHeaderElement extends Components.AppHeader, HTMLStencilElement {
    }
    var HTMLAppHeaderElement: {
        prototype: HTMLAppHeaderElement;
        new (): HTMLAppHeaderElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLCustomSelectElementEventMap {
        "selectChange": OptionType;
    }
    interface HTMLCustomSelectElement extends Components.CustomSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCustomSelectElementEventMap>(type: K, listener: (this: HTMLCustomSelectElement, ev: CustomSelectCustomEvent<HTMLCustomSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCustomSelectElementEventMap>(type: K, listener: (this: HTMLCustomSelectElement, ev: CustomSelectCustomEvent<HTMLCustomSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCustomSelectElement: {
        prototype: HTMLCustomSelectElement;
        new (): HTMLCustomSelectElement;
    };
    interface HTMLSearchResultCardElement extends Components.SearchResultCard, HTMLStencilElement {
    }
    var HTMLSearchResultCardElement: {
        prototype: HTMLSearchResultCardElement;
        new (): HTMLSearchResultCardElement;
    };
    interface HTMLSearchResultsElement extends Components.SearchResults, HTMLStencilElement {
    }
    var HTMLSearchResultsElement: {
        prototype: HTMLSearchResultsElement;
        new (): HTMLSearchResultsElement;
    };
    interface HTMLElementTagNameMap {
        "app-card": HTMLAppCardElement;
        "app-header": HTMLAppHeaderElement;
        "app-home": HTMLAppHomeElement;
        "app-root": HTMLAppRootElement;
        "custom-select": HTMLCustomSelectElement;
        "search-result-card": HTMLSearchResultCardElement;
        "search-results": HTMLSearchResultsElement;
    }
}
declare namespace LocalJSX {
    interface AppCard {
        "airDate"?: string;
        "imageURL"?: string;
        "itemId"?: number;
        "mediaType"?: 'person' | 'tv' | 'movie';
        "name"?: string;
        "rating"?: string | number;
    }
    interface AppHeader {
    }
    interface AppHome {
    }
    interface AppRoot {
    }
    interface CustomSelect {
        "allowClear"?: boolean;
        "clearSelectionText"?: string;
        "onSelectChange"?: (event: CustomSelectCustomEvent<OptionType>) => void;
        "options"?: OptionType[];
        "placeholder"?: string;
        "selectedOption"?: OptionType;
    }
    interface SearchResultCard {
        "airDate"?: string;
        "imageURL"?: string;
        "itemId"?: number;
        "mediaType"?: 'person' | 'tv' | 'movie';
        "name"?: string;
        "rating"?: string | number;
    }
    interface SearchResults {
        "query"?: string;
        "type"?: any;
    }
    interface IntrinsicElements {
        "app-card": AppCard;
        "app-header": AppHeader;
        "app-home": AppHome;
        "app-root": AppRoot;
        "custom-select": CustomSelect;
        "search-result-card": SearchResultCard;
        "search-results": SearchResults;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-card": LocalJSX.AppCard & JSXBase.HTMLAttributes<HTMLAppCardElement>;
            "app-header": LocalJSX.AppHeader & JSXBase.HTMLAttributes<HTMLAppHeaderElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "custom-select": LocalJSX.CustomSelect & JSXBase.HTMLAttributes<HTMLCustomSelectElement>;
            "search-result-card": LocalJSX.SearchResultCard & JSXBase.HTMLAttributes<HTMLSearchResultCardElement>;
            "search-results": LocalJSX.SearchResults & JSXBase.HTMLAttributes<HTMLSearchResultsElement>;
        }
    }
}
